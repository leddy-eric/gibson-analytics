package com.gibson.analytics.core.baseball;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.StringUtils;

import com.gibson.analytics.core.GameStatisticsProvider;
import com.gibson.analytics.core.SupportedLeagues;
import com.gibson.analytics.data.Game;
import com.gibson.analytics.data.GameStatistic;
import com.gibson.analytics.data.Lineup;
import com.gibson.analytics.data.Player;
import com.gibson.analytics.data.PlayerStatistic;

public abstract class AbstractMlbGameStatsProvider implements GameStatisticsProvider {

	@Autowired
	MlbRosterService service;
	
	@Autowired
	MlbParkFactorService parkService;
	
	@Autowired
	MlbGameService gameService;
	
	/**
	 * Lookup method for park factors, should go in team statistics eventually. TODO - Move this into the MLBLineup object.
	 * 
	 * @param game
	 * @return
	 */
	public BigDecimal getHomeParkFactor(Game game) {
		return parkService.findParkFactor(game.getHome().getName());
	}

	/**
	 * 
	 */
	@Override
	public GameStatistic createStatistics(Game game) {
		MlbGame details = gameService.getGameDetails(game);
		
		return createStatistics(game, details.getHome(),  details.getAway());
	}

	/**
	 * To be implemented by extended subclasses.
	 * 
	 * @param game - The game 
	 * @param home - The full MlbLineup for the home team
	 * @param away - the full MlbLineup for the away team
	 * @return GameStatistic - the statistic generated by the provider.
	 */
	public abstract GameStatistic createStatistics(Game game, MlbLineup home, MlbLineup away);

	@Override
	public boolean providesFor(String league) {
		return SupportedLeagues.MLB.name().equals(league);
	}


}
